{"version":3,"file":"auto-arrange-plugin.min.js","sources":["../src/board.js","../src/cache.js","../src/auto-arrange.js","../src/index.js"],"sourcesContent":["export class Board {\n    constructor() {\n        this._cols = [];\n    }\n\n    add(columnIndex, value) {\n        if (!this._cols[columnIndex]) this._cols[columnIndex] = [];\n        \n        this._cols[columnIndex].push(value);\n    }\n\n    toArray() {\n        const normalized = Object.keys(this._cols)\n            .sort((i1, i2) => +i1 - +i2)\n            .map(key => this._cols[key]);\n\n        return normalized;\n    }\n}\n","export class Cache {\n    constructor() {\n        this._map = new WeakMap();\n    }\n\n    track(value) {\n        if (this._map.has(value)) return true;\n        this._map.set(value, true);\n    }\n}\n","import { Board } from './board';\nimport { Cache } from './cache';\n\nexport class AutoArrange {\n    constructor(editor, margin, depth, vertical, offset) {\n        this.editor = editor;\n        this.margin = margin;\n        this.depth = depth;\n        this.vertical = vertical;\n        this.offset = offset;\n    }\n\n    getNodes(node, type = 'output') {\n        const nodes = [];\n        const key = `${type}s`;\n\n        for (let io of node[key].values())\n            for (let connection of io.connections.values())\n                nodes.push(connection[type === 'input' ? 'output' : 'input'].node);\n\n        return nodes;\n    }\n\n    getNodesBoard(node, options, cache = new Cache(), board = new Board(), depth = 0) {\n        if (options.depth && depth > options.depth) return board;\n        if (options.skip && options.skip(node)) return board;\n        if (cache.track(node)) return board;\n\n        board.add(depth, node);\n\n        const outputNodes = options.substitution && options.substitution.output(node) || this.getNodes(node, 'output')\n        const inputNodes = options.substitution && options.substitution.input(node) || this.getNodes(node, 'input')\n\n        outputNodes.map(n => this.getNodesBoard(n, options, cache, board, depth + 1));\n        inputNodes.map(n => this.getNodesBoard(n, options, cache, board, depth - 1));\n\n        return board;\n    }\n\n    getNodeSize(node, vertical = this.vertical) {\n        const el = this.editor.view.nodes.get(node).el;\n\n        return vertical ? {\n            height: el.clientWidth,\n            width: el.clientHeight\n        } : {\n            width: el.clientWidth,\n            height: el.clientHeight\n        }\n    }\n\n    translateNode(node, { x, y, vertical = this.vertical }) {\n        const position = vertical?[y, x]:[x, y];\n\n        this.editor.view.nodes.get(node).translate(...position);\n        this.editor.view.updateConnections({ node });\n    }\n\n    arrange(node = this.editor.nodes[0], { margin = this.margin, vertical = this.vertical, depth = this.depth, offset = this.offset, skip, substitution }) {\n        const board = this.getNodesBoard(node, { depth, skip, substitution }).toArray();\n        const currentMargin = vertical ? { x: margin.y, y: margin.x } : margin;\n        const currentOffset = vertical ? { x: offset.y, y: offset.x } : offset;\n\n        let x = currentOffset.x;\n\n        for (let column of board) {\n            const sizes = column.map(node => this.getNodeSize(node, vertical));\n            const columnWidth  = Math.max(...sizes.map(size => size.width));\n            const fullHeight = sizes.reduce((sum, node) => sum + node.height + currentMargin.y, 0);\n\n            let y = currentOffset.y;\n\n            for (let node of column) {\n                const position = { x, y: y - fullHeight / 2, vertical };\n                const { height } = this.getNodeSize(node, vertical);\n\n                this.translateNode(node, position, vertical);\n\n                y += height + currentMargin.y;\n            }\n\n            x += columnWidth + currentMargin.x;\n        }\n    }\n}\n","import { AutoArrange } from './auto-arrange';\n\nfunction install(editor, { margin = { x: 50, y: 50 }, depth = null, vertical = false, offset = { x: 0, y: 0 } }) {\n    editor.bind('arrange');\n\n    const ar = new AutoArrange(editor, margin, depth, vertical, offset);\n\n    editor.on('arrange', ({ node, ...options }) => ar.arrange(node, options));\n\n    editor.arrange = (node, options) => {\n        console.log(`Deprecated: use editor.trigger('arrange', { node }) instead`);\n        ar.arrange(node, options);\n    }\n}\n\nexport default {\n    name: 'auto-arrange',\n    install\n}\n"],"names":["Board","_cols","columnIndex","value","this","push","Object","keys","sort","i1","i2","map","key","_this","Cache","_map","WeakMap","has","set","AutoArrange","editor","margin","depth","vertical","offset","node","type","nodes","values","io","connections","connection","options","cache","board","skip","track","add","outputNodes","substitution","output","getNodes","inputNodes","input","n","getNodesBoard","el","view","get","height","clientWidth","width","clientHeight","x","y","position","translate","updateConnections","toArray","currentMargin","currentOffset","column","sizes","_this2","getNodeSize","columnWidth","Math","max","size","fullHeight","reduce","sum","translateNode","name","install","bind","ar","on","arrange","console","log"],"mappings":"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"}